tools/train.py:139: UserWarning: `--gpus` is deprecated because we only support single GPU mode in non-distributed training. Use `gpus=1` now.
  warnings.warn('`--gpus` is deprecated because we only support '
2022-02-10 04:32:30,271 - mmseg - INFO - Multi-processing start method is `None`
2022-02-10 04:32:30,271 - mmseg - INFO - OpenCV num_threads is `<built-in function getNumThreads>
2022-02-10 04:32:30,309 - mmseg - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.6.10 |Anaconda, Inc.| (default, Mar 23 2020, 23:13:11) [GCC 7.3.0]
CUDA available: True
GPU 0: Tesla V100-SXM2-32GB
CUDA_HOME: /usr/local/cuda
NVCC: Build cuda_11.0_bu.TC445_37.28358933_0
GCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
PyTorch: 1.6.0a0+9907a3e
PyTorch compiling details: PyTorch built with:
  - GCC 7.5
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2019.0.1 Product Build 20180928 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.2.0 (Git Hash N/A)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.0
  - NVCC architecture flags: -gencode;arch=compute_52,code=sm_52;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_80,code=compute_80
  - CuDNN 8.0.1
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -fvisibility-inlines-hidden -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_INTERNAL_THREADPOOL_IMPL -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, FORCE_FALLBACK_CUDA_MPI=1, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=ON, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, 

TorchVision: 0.7.0a0
OpenCV: 3.4.1
MMCV: 1.3.13
MMCV Compiler: GCC 7.5
MMCV CUDA Compiler: 11.0
MMSegmentation: 0.21.1+29f7969
------------------------------------------------------------

2022-02-10 04:32:30,309 - mmseg - INFO - Distributed training: False
2022-02-10 04:32:30,628 - mmseg - INFO - Config:
norm_cfg = dict(type='BN', requires_grad=True)
model = dict(
    type='EncoderDecoder',
    pretrained='open-mmlab://resnet50_v1c',
    backbone=dict(
        type='ResNetV1c',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        dilations=(1, 1, 2, 4),
        strides=(1, 2, 1, 1),
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=False,
        style='pytorch',
        contract_dilation=True),
    decode_head=dict(
        type='DepthwiseSeparableASPPHead',
        in_channels=2048,
        in_index=3,
        channels=512,
        dilations=(1, 12, 24, 36),
        c1_in_channels=256,
        c1_channels=48,
        dropout_ratio=0.1,
        num_classes=19,
        norm_cfg=dict(type='BN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),
    auxiliary_head=dict(
        type='FCNHead',
        in_channels=1024,
        in_index=2,
        channels=256,
        num_convs=1,
        concat_input=False,
        dropout_ratio=0.1,
        num_classes=19,
        norm_cfg=dict(type='BN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),
    train_cfg=dict(),
    test_cfg=dict(mode='whole'))
dataset_type = 'CityscapesDataset'
data_root = 'data/cityscapes/'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
crop_size = (512, 1024)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations'),
    dict(type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),
    dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),
    dict(type='RandomFlip', prob=0.5),
    dict(type='PhotoMetricDistortion'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_semantic_seg'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(2048, 1024),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=8,
    workers_per_gpu=8,
    train=dict(
        type='CityscapesDataset',
        data_root='data/cityscapes/',
        img_dir='leftImg8bit/train',
        ann_dir='gtFine/train',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations'),
            dict(
                type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),
            dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),
            dict(type='RandomFlip', prob=0.5),
            dict(type='PhotoMetricDistortion'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_semantic_seg'])
        ]),
    val=dict(
        type='CityscapesDataset',
        data_root='data/cityscapes/',
        img_dir='leftImg8bit/val',
        ann_dir='gtFine/val',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(2048, 1024),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='CityscapesDataset',
        data_root='data/cityscapes/',
        img_dir='leftImg8bit/val',
        ann_dir='gtFine/val',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(2048, 1024),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
log_config = dict(
    interval=4, hooks=[dict(type='TextLoggerHook', by_epoch=False)])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
cudnn_benchmark = True
optimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)
optimizer_config = dict()
lr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)
runner = dict(type='IterBasedRunner', max_iters=40)
checkpoint_config = dict(by_epoch=False, interval=8000)
evaluation = dict(interval=8000, metric='mIoU', pre_eval=True)
work_dir = './work_dirs/deeplabv3plus_r50-d8_512x1024_80k_cityscapes'
gpu_ids = range(0, 1)
auto_resume = False

2022-02-10 04:32:30,628 - mmseg - INFO - Set random seed to 191619503, deterministic: False
/workspace/bert/mmsegmentation/mmseg/models/backbones/resnet.py:431: UserWarning: DeprecationWarning: pretrained is a deprecated, please use "init_cfg" instead
  warnings.warn('DeprecationWarning: pretrained is a deprecated, '
2022-02-10 04:32:32,219 - mmseg - INFO - initialize ResNetV1c with init_cfg {'type': 'Pretrained', 'checkpoint': 'open-mmlab://resnet50_v1c'}
2022-02-10 04:32:32,220 - mmcv - INFO - load model from: open-mmlab://resnet50_v1c
2022-02-10 04:32:32,220 - mmcv - INFO - Use load_from_openmmlab loader
Downloading: "https://download.openmmlab.com/pretrain/third_party/resnet50_v1c-2cccc1ad.pth" to /root/.cache/torch/checkpoints/resnet50_v1c-2cccc1ad.pth
  0%|          | 0.00/97.8M [00:00<?, ?B/s]  0%|          | 16.0k/97.8M [00:00<26:53, 63.6kB/s]  0%|          | 48.0k/97.8M [00:00<22:17, 76.7kB/s]  0%|          | 96.0k/97.8M [00:00<17:52, 95.5kB/s]  0%|          | 208k/97.8M [00:00<13:32, 126kB/s]    0%|          | 424k/97.8M [00:01<09:58, 171kB/s]  1%|          | 608k/97.8M [00:01<07:34, 224kB/s]  1%|          | 1.05M/97.8M [00:01<05:23, 314kB/s]  1%|          | 1.22M/97.8M [00:01<04:12, 401kB/s]  2%|▏         | 1.53M/97.8M [00:01<03:06, 541kB/s]  2%|▏         | 1.73M/97.8M [00:01<02:28, 680kB/s]  2%|▏         | 2.12M/97.8M [00:01<01:51, 899kB/s]  2%|▏         | 2.35M/97.8M [00:02<01:31, 1.09MB/s]  3%|▎         | 2.73M/97.8M [00:02<01:12, 1.38MB/s]  3%|▎         | 3.00M/97.8M [00:02<01:03, 1.57MB/s]  3%|▎         | 3.35M/97.8M [00:02<00:52, 1.89MB/s]  4%|▎         | 3.63M/97.8M [00:02<00:49, 1.98MB/s]  4%|▍         | 3.98M/97.8M [00:02<00:43, 2.28MB/s]  4%|▍         | 4.27M/97.8M [00:02<00:42, 2.30MB/s]  5%|▍         | 4.62M/97.8M [00:02<00:37, 2.58MB/s]  5%|▌         | 4.91M/97.8M [00:03<00:40, 2.40MB/s]  5%|▌         | 5.35M/97.8M [00:03<00:34, 2.79MB/s]  6%|▌         | 5.66M/97.8M [00:03<00:38, 2.50MB/s]  6%|▌         | 6.01M/97.8M [00:03<00:36, 2.66MB/s]  6%|▋         | 6.30M/97.8M [00:03<00:36, 2.64MB/s]  7%|▋         | 6.63M/97.8M [00:03<00:34, 2.75MB/s]  7%|▋         | 6.91M/97.8M [00:03<00:35, 2.72MB/s]  7%|▋         | 7.26M/97.8M [00:03<00:32, 2.88MB/s]  8%|▊         | 7.55M/97.8M [00:03<00:34, 2.77MB/s]  8%|▊         | 7.89M/97.8M [00:04<00:32, 2.91MB/s]  8%|▊         | 8.18M/97.8M [00:04<00:34, 2.76MB/s]  9%|▊         | 8.53M/97.8M [00:04<00:31, 2.97MB/s]  9%|▉         | 8.83M/97.8M [00:04<00:33, 2.77MB/s]  9%|▉         | 9.17M/97.8M [00:04<00:31, 2.94MB/s] 10%|▉         | 9.47M/97.8M [00:04<00:32, 2.81MB/s] 10%|█         | 9.81M/97.8M [00:04<00:30, 2.99MB/s] 10%|█         | 10.1M/97.8M [00:04<00:32, 2.85MB/s] 11%|█         | 10.5M/97.8M [00:05<00:30, 3.04MB/s] 11%|█         | 10.8M/97.8M [00:05<00:32, 2.79MB/s] 11%|█▏        | 11.2M/97.8M [00:05<00:31, 2.93MB/s] 12%|█▏        | 11.5M/97.8M [00:05<00:31, 2.87MB/s] 12%|█▏        | 11.8M/97.8M [00:05<00:29, 3.03MB/s] 12%|█▏        | 12.1M/97.8M [00:05<00:30, 2.92MB/s] 13%|█▎        | 12.5M/97.8M [00:05<00:29, 3.05MB/s] 13%|█▎        | 12.8M/97.8M [00:05<00:30, 2.95MB/s] 13%|█▎        | 13.1M/97.8M [00:05<00:29, 3.05MB/s] 14%|█▎        | 13.4M/97.8M [00:06<00:29, 3.02MB/s] 14%|█▍        | 13.8M/97.8M [00:06<00:28, 3.13MB/s] 14%|█▍        | 14.1M/97.8M [00:06<00:28, 3.03MB/s] 15%|█▍        | 14.5M/97.8M [00:06<00:27, 3.21MB/s] 15%|█▌        | 14.8M/97.8M [00:06<00:28, 3.07MB/s] 15%|█▌        | 15.1M/97.8M [00:06<00:27, 3.15MB/s] 16%|█▌        | 15.4M/97.8M [00:06<00:28, 3.06MB/s] 16%|█▌        | 15.7M/97.8M [00:06<00:32, 2.63MB/s] 16%|█▋        | 16.0M/97.8M [00:06<00:33, 2.56MB/s] 17%|█▋        | 16.2M/97.8M [00:07<00:35, 2.41MB/s] 17%|█▋        | 16.5M/97.8M [00:07<00:34, 2.48MB/s] 17%|█▋        | 16.8M/97.8M [00:07<00:37, 2.28MB/s] 17%|█▋        | 17.0M/97.8M [00:07<00:38, 2.20MB/s] 18%|█▊        | 17.2M/97.8M [00:07<00:38, 2.22MB/s] 18%|█▊        | 17.4M/97.8M [00:07<00:36, 2.29MB/s] 18%|█▊        | 17.7M/97.8M [00:07<00:36, 2.28MB/s] 18%|█▊        | 18.0M/97.8M [00:07<00:35, 2.38MB/s] 19%|█▊        | 18.3M/97.8M [00:07<00:31, 2.68MB/s] 19%|█▉        | 18.6M/97.8M [00:08<00:32, 2.54MB/s] 19%|█▉        | 18.9M/97.8M [00:08<00:30, 2.69MB/s] 20%|█▉        | 19.2M/97.8M [00:08<00:32, 2.52MB/s] 20%|█▉        | 19.4M/97.8M [00:08<00:33, 2.42MB/s] 20%|██        | 19.7M/97.8M [00:08<00:33, 2.42MB/s] 20%|██        | 19.9M/97.8M [00:08<00:35, 2.31MB/s] 21%|██        | 20.2M/97.8M [00:08<00:32, 2.47MB/s] 21%|██        | 20.4M/97.8M [00:08<00:32, 2.50MB/s] 21%|██        | 20.7M/97.8M [00:09<00:34, 2.34MB/s] 21%|██▏       | 21.0M/97.8M [00:09<00:31, 2.58MB/s] 22%|██▏       | 21.3M/97.8M [00:09<00:29, 2.72MB/s] 22%|██▏       | 21.7M/97.8M [00:09<00:28, 2.85MB/s] 22%|██▏       | 21.9M/97.8M [00:09<00:28, 2.83MB/s] 23%|██▎       | 22.2M/97.8M [00:09<00:29, 2.73MB/s] 23%|██▎       | 22.5M/97.8M [00:09<00:28, 2.72MB/s] 23%|██▎       | 23.0M/97.8M [00:09<00:25, 3.11MB/s] 24%|██▍       | 23.3M/97.8M [00:09<00:25, 3.05MB/s] 24%|██▍       | 23.7M/97.8M [00:10<00:23, 3.29MB/s] 25%|██▍       | 24.1M/97.8M [00:10<00:22, 3.38MB/s] 25%|██▍       | 24.4M/97.8M [00:10<00:23, 3.29MB/s] 25%|██▌       | 24.9M/97.8M [00:10<00:21, 3.61MB/s] 26%|██▌       | 25.2M/97.8M [00:10<00:23, 3.30MB/s] 26%|██▌       | 25.6M/97.8M [00:10<00:22, 3.39MB/s] 27%|██▋       | 25.9M/97.8M [00:10<00:24, 3.11MB/s] 27%|██▋       | 26.2M/97.8M [00:10<00:26, 2.86MB/s] 27%|██▋       | 26.6M/97.8M [00:10<00:24, 3.02MB/s] 28%|██▊       | 26.9M/97.8M [00:11<00:26, 2.76MB/s] 28%|██▊       | 27.4M/97.8M [00:11<00:23, 3.10MB/s] 28%|██▊       | 27.7M/97.8M [00:11<00:22, 3.23MB/s] 29%|██▊       | 28.0M/97.8M [00:11<00:22, 3.19MB/s] 29%|██▉       | 28.3M/97.8M [00:11<00:22, 3.18MB/s] 29%|██▉       | 28.7M/97.8M [00:11<00:23, 3.07MB/s] 30%|██▉       | 29.0M/97.8M [00:11<00:23, 3.10MB/s] 30%|███       | 29.4M/97.8M [00:11<00:22, 3.24MB/s] 30%|███       | 29.8M/97.8M [00:11<00:21, 3.33MB/s] 31%|███       | 30.2M/97.8M [00:12<00:19, 3.56MB/s] 31%|███▏      | 30.6M/97.8M [00:12<00:19, 3.68MB/s] 32%|███▏      | 31.2M/97.8M [00:12<00:16, 4.14MB/s] 32%|███▏      | 31.6M/97.8M [00:12<00:16, 4.09MB/s] 33%|███▎      | 32.1M/97.8M [00:12<00:15, 4.35MB/s] 33%|███▎      | 32.6M/97.8M [00:12<00:15, 4.50MB/s] 34%|███▍      | 33.0M/97.8M [00:12<00:14, 4.59MB/s] 34%|███▍      | 33.6M/97.8M [00:12<00:14, 4.70MB/s] 35%|███▍      | 34.1M/97.8M [00:12<00:14, 4.77MB/s] 35%|███▌      | 34.6M/97.8M [00:13<00:13, 4.78MB/s] 36%|███▌      | 35.2M/97.8M [00:13<00:12, 5.26MB/s] 37%|███▋      | 35.7M/97.8M [00:13<00:14, 4.58MB/s] 37%|███▋      | 36.2M/97.8M [00:13<00:14, 4.55MB/s] 38%|███▊      | 36.8M/97.8M [00:13<00:13, 4.66MB/s] 38%|███▊      | 37.2M/97.8M [00:13<00:13, 4.62MB/s] 39%|███▊      | 37.7M/97.8M [00:13<00:13, 4.55MB/s] 39%|███▉      | 38.1M/97.8M [00:13<00:14, 4.45MB/s] 40%|███▉      | 38.9M/97.8M [00:13<00:12, 5.10MB/s] 40%|████      | 39.4M/97.8M [00:14<00:12, 4.84MB/s] 41%|████      | 39.9M/97.8M [00:14<00:12, 4.83MB/s] 41%|████▏     | 40.6M/97.8M [00:14<00:11, 5.35MB/s] 42%|████▏     | 41.1M/97.8M [00:14<00:11, 5.27MB/s] 43%|████▎     | 41.6M/97.8M [00:14<00:11, 5.18MB/s] 43%|████▎     | 42.3M/97.8M [00:14<00:10, 5.61MB/s] 44%|████▍     | 42.9M/97.8M [00:14<00:10, 5.38MB/s] 44%|████▍     | 43.4M/97.8M [00:14<00:11, 5.03MB/s] 45%|████▍     | 43.9M/97.8M [00:14<00:10, 5.19MB/s] 45%|████▌     | 44.5M/97.8M [00:15<00:10, 5.38MB/s] 46%|████▌     | 45.2M/97.8M [00:15<00:09, 5.88MB/s] 47%|████▋     | 45.8M/97.8M [00:15<00:11, 4.89MB/s] 47%|████▋     | 46.4M/97.8M [00:15<00:10, 5.26MB/s] 48%|████▊     | 47.1M/97.8M [00:15<00:09, 5.65MB/s] 49%|████▊     | 47.6M/97.8M [00:15<00:10, 5.15MB/s] 49%|████▉     | 48.2M/97.8M [00:15<00:10, 4.79MB/s] 50%|████▉     | 48.8M/97.8M [00:15<00:10, 5.08MB/s] 50%|█████     | 49.3M/97.8M [00:16<00:09, 5.19MB/s] 51%|█████     | 49.8M/97.8M [00:16<00:09, 5.22MB/s] 51%|█████▏    | 50.4M/97.8M [00:16<00:09, 5.22MB/s] 52%|█████▏    | 50.9M/97.8M [00:16<00:09, 5.15MB/s] 53%|█████▎    | 51.5M/97.8M [00:16<00:09, 5.22MB/s] 53%|█████▎    | 52.0M/97.8M [00:16<00:09, 4.83MB/s] 54%|█████▍    | 52.6M/97.8M [00:16<00:08, 5.29MB/s] 54%|█████▍    | 53.3M/97.8M [00:16<00:08, 5.55MB/s] 55%|█████▌    | 53.8M/97.8M [00:16<00:08, 5.24MB/s] 56%|█████▌    | 54.3M/97.8M [00:17<00:08, 5.32MB/s] 56%|█████▌    | 54.9M/97.8M [00:17<00:08, 5.23MB/s] 57%|█████▋    | 55.5M/97.8M [00:17<00:07, 5.56MB/s] 57%|█████▋    | 56.1M/97.8M [00:17<00:07, 5.64MB/s] 58%|█████▊    | 56.7M/97.8M [00:17<00:07, 5.75MB/s] 59%|█████▊    | 57.3M/97.8M [00:17<00:07, 5.52MB/s] 59%|█████▉    | 57.8M/97.8M [00:17<00:13, 3.16MB/s] 60%|█████▉    | 58.2M/97.8M [00:18<00:12, 3.43MB/s] 60%|█████▉    | 58.6M/97.8M [00:18<00:12, 3.29MB/s] 60%|██████    | 59.0M/97.8M [00:18<00:12, 3.17MB/s] 61%|██████    | 59.4M/97.8M [00:18<00:12, 3.12MB/s] 61%|██████    | 59.7M/97.8M [00:18<00:13, 2.97MB/s] 61%|██████▏   | 60.0M/97.8M [00:18<00:14, 2.65MB/s] 62%|██████▏   | 60.3M/97.8M [00:18<00:14, 2.69MB/s] 62%|██████▏   | 60.6M/97.8M [00:18<00:15, 2.59MB/s] 62%|██████▏   | 60.8M/97.8M [00:19<00:17, 2.18MB/s] 62%|██████▏   | 61.1M/97.8M [00:19<00:18, 2.12MB/s] 63%|██████▎   | 61.3M/97.8M [00:19<00:17, 2.19MB/s] 63%|██████▎   | 61.6M/97.8M [00:19<00:16, 2.30MB/s] 63%|██████▎   | 61.8M/97.8M [00:19<00:16, 2.34MB/s] 63%|██████▎   | 62.1M/97.8M [00:19<00:16, 2.32MB/s] 64%|██████▎   | 62.3M/97.8M [00:19<00:16, 2.31MB/s] 64%|██████▍   | 62.7M/97.8M [00:19<00:14, 2.60MB/s] 65%|██████▍   | 63.1M/97.8M [00:19<00:12, 2.94MB/s] 65%|██████▍   | 63.4M/97.8M [00:20<00:12, 2.79MB/s] 65%|██████▌   | 63.8M/97.8M [00:20<00:12, 2.91MB/s] 66%|██████▌   | 64.3M/97.8M [00:20<00:10, 3.37MB/s] 66%|██████▌   | 64.7M/97.8M [00:20<00:11, 3.13MB/s] 67%|██████▋   | 65.1M/97.8M [00:20<00:09, 3.43MB/s] 67%|██████▋   | 65.5M/97.8M [00:20<00:11, 3.02MB/s] 67%|██████▋   | 65.8M/97.8M [00:20<00:10, 3.13MB/s] 68%|██████▊   | 66.1M/97.8M [00:21<00:12, 2.72MB/s] 68%|██████▊   | 66.4M/97.8M [00:21<00:12, 2.61MB/s] 68%|██████▊   | 66.7M/97.8M [00:21<00:12, 2.60MB/s] 68%|██████▊   | 67.0M/97.8M [00:21<00:12, 2.67MB/s] 69%|██████▉   | 67.3M/97.8M [00:21<00:13, 2.44MB/s] 69%|██████▉   | 67.5M/97.8M [00:21<00:13, 2.35MB/s] 69%|██████▉   | 67.7M/97.8M [00:21<00:13, 2.35MB/s] 70%|██████▉   | 68.1M/97.8M [00:21<00:11, 2.69MB/s] 70%|██████▉   | 68.5M/97.8M [00:21<00:10, 2.87MB/s] 71%|███████   | 69.0M/97.8M [00:22<00:09, 3.31MB/s] 71%|███████   | 69.5M/97.8M [00:22<00:07, 3.80MB/s] 72%|███████▏  | 70.0M/97.8M [00:22<00:07, 4.05MB/s] 72%|███████▏  | 70.7M/97.8M [00:22<00:06, 4.64MB/s] 73%|███████▎  | 71.4M/97.8M [00:22<00:05, 5.20MB/s] 74%|███████▎  | 72.0M/97.8M [00:22<00:05, 5.23MB/s] 74%|███████▍  | 72.6M/97.8M [00:22<00:04, 5.52MB/s] 75%|███████▍  | 73.2M/97.8M [00:22<00:04, 5.53MB/s] 76%|███████▌  | 74.0M/97.8M [00:22<00:04, 6.22MB/s] 76%|███████▋  | 74.7M/97.8M [00:22<00:04, 5.95MB/s] 77%|███████▋  | 75.3M/97.8M [00:23<00:03, 5.96MB/s] 78%|███████▊  | 75.9M/97.8M [00:23<00:03, 6.12MB/s] 78%|███████▊  | 76.5M/97.8M [00:23<00:03, 6.14MB/s] 79%|███████▉  | 77.1M/97.8M [00:23<00:03, 5.73MB/s] 79%|███████▉  | 77.7M/97.8M [00:23<00:04, 4.89MB/s] 80%|███████▉  | 78.2M/97.8M [00:23<00:04, 4.42MB/s] 80%|████████  | 78.6M/97.8M [00:23<00:05, 3.77MB/s] 81%|████████  | 79.0M/97.8M [00:24<00:05, 3.58MB/s] 81%|████████  | 79.4M/97.8M [00:24<00:05, 3.49MB/s] 82%|████████▏ | 79.8M/97.8M [00:24<00:06, 3.09MB/s] 82%|████████▏ | 80.1M/97.8M [00:24<00:05, 3.13MB/s] 82%|████████▏ | 80.4M/97.8M [00:24<00:05, 3.04MB/s] 83%|████████▎ | 80.9M/97.8M [00:24<00:05, 3.41MB/s] 83%|████████▎ | 81.3M/97.8M [00:24<00:05, 3.38MB/s] 83%|████████▎ | 81.6M/97.8M [00:24<00:04, 3.55MB/s] 84%|████████▍ | 82.0M/97.8M [00:24<00:04, 3.67MB/s] 84%|████████▍ | 82.4M/97.8M [00:25<00:04, 3.78MB/s] 85%|████████▍ | 83.0M/97.8M [00:25<00:03, 4.26MB/s] 85%|████████▌ | 83.4M/97.8M [00:25<00:03, 3.93MB/s] 86%|████████▌ | 84.0M/97.8M [00:25<00:03, 4.42MB/s] 86%|████████▋ | 84.6M/97.8M [00:25<00:02, 4.69MB/s] 87%|████████▋ | 85.0M/97.8M [00:25<00:02, 4.64MB/s] 87%|████████▋ | 85.6M/97.8M [00:25<00:02, 4.91MB/s] 88%|████████▊ | 86.1M/97.8M [00:25<00:02, 4.68MB/s] 88%|████████▊ | 86.5M/97.8M [00:26<00:03, 3.81MB/s] 89%|████████▉ | 86.9M/97.8M [00:26<00:03, 3.45MB/s] 89%|████████▉ | 87.4M/97.8M [00:26<00:02, 3.76MB/s] 90%|████████▉ | 87.8M/97.8M [00:26<00:02, 3.58MB/s] 90%|█████████ | 88.1M/97.8M [00:26<00:02, 3.54MB/s] 90%|█████████ | 88.5M/97.8M [00:26<00:03, 3.09MB/s] 91%|█████████ | 88.8M/97.8M [00:26<00:03, 2.90MB/s] 91%|█████████ | 89.2M/97.8M [00:26<00:02, 3.09MB/s] 92%|█████████▏| 89.6M/97.8M [00:26<00:02, 3.42MB/s] 92%|█████████▏| 90.1M/97.8M [00:27<00:02, 3.68MB/s] 93%|█████████▎| 90.7M/97.8M [00:27<00:01, 4.14MB/s] 93%|█████████▎| 91.1M/97.8M [00:27<00:01, 4.13MB/s] 94%|█████████▍| 91.7M/97.8M [00:27<00:01, 4.49MB/s] 95%|█████████▍| 92.5M/97.8M [00:27<00:01, 5.15MB/s] 95%|█████████▌| 93.0M/97.8M [00:27<00:00, 5.25MB/s] 96%|█████████▌| 93.7M/97.8M [00:27<00:00, 5.75MB/s] 96%|█████████▋| 94.3M/97.8M [00:27<00:00, 5.68MB/s] 97%|█████████▋| 95.0M/97.8M [00:27<00:00, 6.07MB/s] 98%|█████████▊| 95.6M/97.8M [00:28<00:00, 5.87MB/s] 98%|█████████▊| 96.2M/97.8M [00:28<00:00, 5.47MB/s] 99%|█████████▉| 96.8M/97.8M [00:28<00:00, 5.50MB/s]100%|█████████▉| 97.5M/97.8M [00:28<00:00, 6.07MB/s]100%|██████████| 97.8M/97.8M [00:28<00:00, 3.58MB/s]
2022-02-10 04:33:04,146 - mmcv - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

2022-02-10 04:33:04,176 - mmseg - INFO - initialize DepthwiseSeparableASPPHead with init_cfg {'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
2022-02-10 04:33:04,331 - mmseg - INFO - initialize FCNHead with init_cfg {'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
tools/train.py:226: UserWarning: SyncBN is only supported with DDP. To be compatible with DP, we convert SyncBN to BN. Please use dist_train.sh which can avoid this error.
  'SyncBN is only supported with DDP. To be compatible with DP, '
2022-02-10 04:33:04,347 - mmseg - INFO - EncoderDecoder(
  (backbone): ResNetV1c(
    (stem): Sequential(
      (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace=True)
      (6): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace=True)
    )
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer4): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
  )
  init_cfg={'type': 'Pretrained', 'checkpoint': 'open-mmlab://resnet50_v1c'}
  (decode_head): DepthwiseSeparableASPPHead(
    input_transform=None, ignore_index=255, align_corners=False
    (loss_decode): CrossEntropyLoss()
    (conv_seg): Conv2d(512, 19, kernel_size=(1, 1), stride=(1, 1))
    (dropout): Dropout2d(p=0.1, inplace=False)
    (image_pool): Sequential(
      (0): AdaptiveAvgPool2d(output_size=1)
      (1): ConvModule(
        (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
    )
    (aspp_modules): DepthwiseSeparableASPPModule(
      (0): ConvModule(
        (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
      (1): DepthwiseSeparableConvModule(
        (depthwise_conv): ConvModule(
          (conv): Conv2d(2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(12, 12), dilation=(12, 12), groups=2048, bias=False)
          (bn): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (pointwise_conv): ConvModule(
          (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
      )
      (2): DepthwiseSeparableConvModule(
        (depthwise_conv): ConvModule(
          (conv): Conv2d(2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(24, 24), dilation=(24, 24), groups=2048, bias=False)
          (bn): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (pointwise_conv): ConvModule(
          (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
      )
      (3): DepthwiseSeparableConvModule(
        (depthwise_conv): ConvModule(
          (conv): Conv2d(2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(36, 36), dilation=(36, 36), groups=2048, bias=False)
          (bn): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (pointwise_conv): ConvModule(
          (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
      )
    )
    (bottleneck): ConvModule(
      (conv): Conv2d(2560, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (activate): ReLU(inplace=True)
    )
    (c1_bottleneck): ConvModule(
      (conv): Conv2d(256, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (activate): ReLU(inplace=True)
    )
    (sep_bottleneck): Sequential(
      (0): DepthwiseSeparableConvModule(
        (depthwise_conv): ConvModule(
          (conv): Conv2d(560, 560, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=560, bias=False)
          (bn): BatchNorm2d(560, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (pointwise_conv): ConvModule(
          (conv): Conv2d(560, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
      )
      (1): DepthwiseSeparableConvModule(
        (depthwise_conv): ConvModule(
          (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512, bias=False)
          (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (pointwise_conv): ConvModule(
          (conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
      )
    )
  )
  init_cfg={'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
  (auxiliary_head): FCNHead(
    input_transform=None, ignore_index=255, align_corners=False
    (loss_decode): CrossEntropyLoss()
    (conv_seg): Conv2d(256, 19, kernel_size=(1, 1), stride=(1, 1))
    (dropout): Dropout2d(p=0.1, inplace=False)
    (convs): Sequential(
      (0): ConvModule(
        (conv): Conv2d(1024, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
    )
  )
  init_cfg={'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
)
2022-02-10 04:33:04,413 - mmseg - INFO - Loaded 2975 images
2022-02-10 04:33:06,515 - mmseg - INFO - Start running, host: root@instance-3bwob41y-16, work_dir: /workspace/bert/mmsegmentation/work_dirs/deeplabv3plus_r50-d8_512x1024_80k_cityscapes
2022-02-10 04:33:06,516 - mmseg - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(LOW         ) IterTimerHook                      
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2022-02-10 04:33:06,516 - mmseg - INFO - workflow: [('train', 1)], max: 40 iters
2022-02-10 04:33:23,741 - mmseg - INFO - Iter [4/40]	lr: 9.329e-03, eta: 0:02:32, time: 4.230, data_time: 0.349, memory: 29192, decode.loss_ce: 2.5170, decode.acc_seg: 19.8892, aux.loss_ce: 1.0672, aux.acc_seg: 10.2794, loss: 3.5842
2022-02-10 04:33:30,572 - mmseg - INFO - Iter [8/40]	lr: 8.426e-03, eta: 0:01:35, time: 1.708, data_time: 0.033, memory: 29192, decode.loss_ce: 2.1367, decode.acc_seg: 27.1395, aux.loss_ce: 1.0314, aux.acc_seg: 31.1404, loss: 3.1681
2022-02-10 04:33:37,402 - mmseg - INFO - Iter [12/40]	lr: 7.512e-03, eta: 0:01:11, time: 1.707, data_time: 0.036, memory: 29192, decode.loss_ce: 1.9667, decode.acc_seg: 26.1066, aux.loss_ce: 0.9303, aux.acc_seg: 34.8586, loss: 2.8970
2022-02-10 04:33:44,283 - mmseg - INFO - Iter [16/40]	lr: 6.585e-03, eta: 0:00:56, time: 1.720, data_time: 0.036, memory: 29192, decode.loss_ce: 1.8890, decode.acc_seg: 34.2006, aux.loss_ce: 0.8675, aux.acc_seg: 36.3823, loss: 2.7565
2022-02-10 04:33:51,148 - mmseg - INFO - Iter [20/40]	lr: 5.643e-03, eta: 0:00:44, time: 1.716, data_time: 0.033, memory: 29192, decode.loss_ce: 1.7824, decode.acc_seg: 43.1326, aux.loss_ce: 0.7836, aux.acc_seg: 46.5181, loss: 2.5660
2022-02-10 04:33:58,006 - mmseg - INFO - Iter [24/40]	lr: 4.683e-03, eta: 0:00:34, time: 1.715, data_time: 0.032, memory: 29192, decode.loss_ce: 1.6368, decode.acc_seg: 44.7571, aux.loss_ce: 0.7570, aux.acc_seg: 40.4140, loss: 2.3938
2022-02-10 04:34:04,851 - mmseg - INFO - Iter [28/40]	lr: 3.700e-03, eta: 0:00:24, time: 1.711, data_time: 0.034, memory: 29192, decode.loss_ce: 1.7375, decode.acc_seg: 40.1496, aux.loss_ce: 0.7750, aux.acc_seg: 32.8210, loss: 2.5125
2022-02-10 04:34:11,688 - mmseg - INFO - Iter [32/40]	lr: 2.686e-03, eta: 0:00:16, time: 1.709, data_time: 0.033, memory: 29192, decode.loss_ce: 1.3983, decode.acc_seg: 53.7798, aux.loss_ce: 0.7011, aux.acc_seg: 45.2461, loss: 2.0993
2022-02-10 04:34:18,545 - mmseg - INFO - Iter [36/40]	lr: 1.624e-03, eta: 0:00:07, time: 1.714, data_time: 0.033, memory: 29192, decode.loss_ce: 1.5387, decode.acc_seg: 48.3024, aux.loss_ce: 0.7458, aux.acc_seg: 38.0974, loss: 2.2845
2022-02-10 04:34:25,329 - mmseg - INFO - Saving checkpoint at 40 iterations
2022-02-10 04:34:25,895 - mmseg - INFO - Iter [40/40]	lr: 4.579e-04, eta: 0:00:00, time: 1.856, data_time: 0.033, memory: 29192, decode.loss_ce: 1.3799, decode.acc_seg: 56.7032, aux.loss_ce: 0.6950, aux.acc_seg: 44.7848, loss: 2.0750
